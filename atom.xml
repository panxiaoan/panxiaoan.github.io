<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://panxiaoan.github.io</id>
    <title>行走在年轮之上</title>
    <updated>2019-05-31T02:51:43.691Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://panxiaoan.github.io"/>
    <link rel="self" href="https://panxiaoan.github.io/atom.xml"/>
    <subtitle>她就像蒲公英一样的淘气,不,比蒲公英还要淘气。 有许多人多认为她很笨,可是她总觉得自己是最聪明的。 </subtitle>
    <logo>https://panxiaoan.github.io/images/avatar.png</logo>
    <icon>https://panxiaoan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 行走在年轮之上</rights>
    <entry>
        <title type="html"><![CDATA[macOS：安装 SF Mono 字体]]></title>
        <id>https://panxiaoan.github.io/post/macosan-zhuang-sf-mono-zi-ti</id>
        <link href="https://panxiaoan.github.io/post/macosan-zhuang-sf-mono-zi-ti">
        </link>
        <updated>2019-05-31T02:31:08.000Z</updated>
        <content type="html"><![CDATA[<p>macOS Sierra 默认英文字体为 SF Mono，而该字体并不在 macOS
的字体库中，所以其他软件并不能使用到该字体。 那怎么办呢？方法很简单：从 macOS 自带的
Xcode 软件中拷贝。具体方法如下：</p>
<ul>
<li>将 SF Mono
字体，从目录：<code>/Applications/Xcode.app/Contents/SharedFrameworks/DVTKit.framework/Versions/A/Resources/Fonts</code>
拷贝到自己常用的目录，比如我拷贝到了 <code>/Users/panxiaoan/Downloads/SF Mono</code></li>
<li>从应用程序中打开 <code>字体册.app</code>，点击 <code>+</code>，选择字体目录后即可安装。</li>
<li>安装成功后，可在用户目录中显示</li>
</ul>
<p><img src="https://github.com/panxiaoan/panxiaoan.github.io/raw/master/assets/vendor/octicons/svg/font-sf-mono-01.png" alt="font-sf-mono-01"></p>
<p><img src="https://github.com/panxiaoan/panxiaoan.github.io/raw/master/assets/vendor/octicons/svg/font-sf-mono.png" alt="font-sf-mono"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GWT：Super Dev Mode]]></title>
        <id>https://panxiaoan.github.io/post/gwtsuper-dev-mode</id>
        <link href="https://panxiaoan.github.io/post/gwtsuper-dev-mode">
        </link>
        <updated>2019-05-31T02:30:33.000Z</updated>
        <content type="html"><![CDATA[<p>本文主要介绍 Spring Boot 整合 Google GWT 前端框架后，使用 GWT Super Dev Mode 模式通过 Chrome 浏览器调试前端代码。
Google Web Toolkit，GWT：使用 Java 语言快速构建性能高的 JavaScript 前端应用程序的工具集。
GWT 有以下优点：</p>
<ul>
<li>能够降低开发难度</li>
<li>构建复杂的前端应用更简单和健壮</li>
<li>使用 Java 编写前端交互界面，然后 GWT 会交叉编译到优化的 JavaScript</li>
</ul>
<h1 id="开发环境">开发环境</h1>
<ul>
<li>macOS 10.14</li>
<li>JDK 1.8</li>
<li>IntelliJ IDEA 2018.02</li>
<li>插件：GWT Support</li>
<li>浏览器 Chrome</li>
<li>示例项目：git clone https://github.com/panxiaoan/spring-boot-gwt-sample.git</li>
<li>GWT 2.8.1： <a href="http://www.gwtproject.org/versions.html">下载</a></li>
</ul>
<h1 id="super-dev-mode-配置">Super Dev Mode 配置</h1>
<h2 id="配置-web-module">配置 Web Module</h2>
<ul>
<li>Web Resource Directory</li>
</ul>
<pre><code>/Users/panxiaoan/work/devops/workspace-idea/projects/github/spring-boot-gwt-sample/src/main/resources/static
</code></pre>
<p><img src="https://panxiaoan.github.io/post-images/1559269972884.png" alt=""></p>
<h2 id="配置-gwt-module">配置 GWT Module</h2>
<p><img src="https://panxiaoan.github.io/post-images/1559270001192.png" alt=""></p>
<h2 id="配置-gwt-rundebug-configurations">配置 GWT Run/Debug Configurations</h2>
<pre><code>Name：RunSpringBootGWTAppDebug
VM options：-Xms1g -Xmx1g
Dev Mode parameters：-war src/main/resources/static -nostartServer -port 8080 -workDir /Users/panxiaoan/work/devops/workspace-idea/projects/github/spring-boot-gwt/target
Working directory: /Users/panxiaoan/work/devops/workspace-idea/projects/github/spring-boot-gwt
</code></pre>
<p><img src="https://panxiaoan.github.io/post-images/1559270013380.png" alt=""></p>
<h1 id="使用方法">使用方法</h1>
<blockquote>
<p>注意：一定要以下步骤，按部就班运行</p>
</blockquote>
<ul>
<li>第一步：运行 Spring Boot 应用：com.pxa.sample.RunSpringBootGWTSampleApp</li>
<li>第二步：运行 RunSpringBootGWTAppDebug，此处会自动弹出 Chrome 浏览器</li>
</ul>
<h4 id="初始编译中">初始编译中</h4>
<p><img src="https://panxiaoan.github.io/post-images/1559270021215.png" alt=""></p>
<h4 id="chrome-javascript-console-debug">Chrome JavaScript Console Debug</h4>
<p><img src="https://panxiaoan.github.io/post-images/1559270027908.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kubernetes：部署 Spring Boot 应用 06]]></title>
        <id>https://panxiaoan.github.io/post/kubernetesbu-shu-spring-boot-ying-yong-06</id>
        <link href="https://panxiaoan.github.io/post/kubernetesbu-shu-spring-boot-ying-yong-06">
        </link>
        <updated>2019-05-31T02:30:09.000Z</updated>
        <content type="html"><![CDATA[<p>前面几章我们大致了解了什么是 Kubernetes, 它能做什么, 以及如何安装, 授权. 今天我们在已经准备好的 Kubernetes 集群中, 安装一个 SpringBoot 应用.</p>
<h1 id="下载镜像">下载镜像</h1>
<pre><code class="language-shell"># 在 k8s-node01 中 下载已经准备好的镜像
docker pull panxiaoan/spring-boot-gwt-sample:39

# 镜像对应用的源码: https://github.com/panxiaoan/spring-boot-gwt-sample
</code></pre>
<h1 id="在-k8s-master-编写部署配置文件-deploymentyaml">在 k8s-master 编写部署配置文件: deployment.yaml</h1>
<pre><code class="language-yaml">---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
    labels:
    app: springbootgwtsample
    version: v1.1.1
    name: springbootgwtsample
    namespace: default
spec:
    replicas: 1
    selector:
    matchLabels:
        app: springbootgwtsample
    template:
    metadata:
        labels:
        app: springbootgwtsample
    spec:
        containers:
        - name: springbootgwtsample
        image: panxiaoan/spring-boot-gwt-sample:39
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
            protocol: TCP
        livenessProbe:
            httpGet:
            path: /
            port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
    name: springbootgwtsample
    labels:
    app: springbootgwtsample
spec:
    type: NodePort
    selector:
    app: springbootgwtsample
    ports:
    - port: 8080
    protocol: TCP
    targetPort: 8080
    nodePort: 30233
</code></pre>
<h1 id="在-k8s-master-部署应用">在 k8s-master 部署应用</h1>
<pre><code class="language-shell"># 部署
kubectl apply -f deployment.yaml
</code></pre>
<h2 id="访问应用-http19216824616630233">访问应用: http://192.168.246.166:30233</h2>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/9c2dabfd-79b8-4933-ad97-b584e7761032/Untitled.png?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536378813&Signature=NozI4dHux5%2BX1mgR8BUU4cGbtIQ%3D" />
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/02c47fa2-2f65-4354-8554-af7d8d83d75c/Untitled.png?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536378794&Signature=KWwuy3AsoT70hQeqYI8jNDwtICA%3D" />
<h1 id="其他指令">其他指令</h1>
<pre><code class="language-shell"># 手动升级
kubectl set image deployment/springbootgwtsample springbootgwtsample=panxiaoan/spring-boot-gwt-sample:40 --namespace=default

# 查看版本
kubectl rollout history deployments --namespace=default

# 查看历史版本
kubectl describe deployment/springbootgwtsample --namespace=default
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kubernetes：RBAC 授权配置 05]]></title>
        <id>https://panxiaoan.github.io/post/kubernetesrbac-shou-quan-pei-zhi-05</id>
        <link href="https://panxiaoan.github.io/post/kubernetesrbac-shou-quan-pei-zhi-05">
        </link>
        <updated>2019-05-31T02:29:42.000Z</updated>
        <content type="html"><![CDATA[<p>在 Kubernetes 1.6 版本后, 新增角色访问控制机制（Role-Based Access，RBAC）让集群管理员可以针对特定使用者或服务账号的角色，进行更精确的资源访问控制。在 RBAC 中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。</p>
<h1 id="rbac-api-对象">RBAC API 对象</h1>
<p>Kubernetes 有一个很基本的特性就是它的<a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/">所有资源对象都是模型化的 API 对象</a>，允许执行 CRUD(Create、Read、Update、Delete)操作(也就是我们常说的增、删、改、查操作)，比如下面的这下资源：</p>
<ul>
<li>Pods</li>
<li>ConfigMaps</li>
<li>Deployments</li>
<li>Nodes</li>
<li>Secrets</li>
<li>Namespaces</li>
</ul>
<p>上面这些资源对象的可能存在的操作有：</p>
<ul>
<li>create</li>
<li>get</li>
<li>delete</li>
<li>list</li>
<li>update</li>
<li>edit</li>
<li>watch</li>
<li>exec</li>
</ul>
<p>在更上层，这些资源和 API Group 进行关联，比如<code>Pods</code>属于 Core API Group，而<code>Deployements</code>属于 apps API Group，要在 <code>Kubernetes</code> 中进行 <code>RBAC</code> 的管理，除了上面的这些资源和操作以外，我们还需要另外的一些对象：</p>
<ul>
<li>Rule：规则，规则是一组属于不同 API Group 资源上的一组操作的集合</li>
<li>Role 和 ClusterRole：角色和集群角色，这两个对象都包含上面的 Rules 元素，二者的区别在于，在 Role 中，定义的规则只适用于单个命名空间，也就是和 namespace 关联的，而 ClusterRole 是集群范围内的，因此定义的规则不受命名空间的约束。另外 Role 和 ClusterRole 在 <code>Kubernetes</code> 中都被定义为集群内部的 API 资源，和我们前面学习过的 Pod、ConfigMap 这些类似，都是我们集群的资源对象，所以同样的可以使用我们前面的<code>kubectl</code>相关的命令来进行操作</li>
<li>Subject：主题，对应在集群中尝试操作的对象，集群中定义了3种类型的主题资源：
<ul>
<li>User Account：用户，这是有外部独立服务进行管理的，管理员进行私钥的分配，用户可以使用 KeyStone或者 Goolge 帐号，甚至一个用户名和密码的文件列表也可以。对于用户的管理集群内部没有一个关联的资源对象，所以用户不能通过集群内部的 API 来进行管理</li>
<li>Group：组，这是用来关联多个账户的，集群中有一些默认创建的组，比如cluster-admin</li>
<li>Service Account：服务帐号，通过<code>Kubernetes</code> API 来管理的一些用户帐号，和 namespace 进行关联的，适用于集群内部运行的应用程序，需要通过 API 来完成权限认证，所以在集群内部进行权限操作，我们都需要使用到 ServiceAccount，这也是我们这节课的重点</li>
</ul>
</li>
<li>RoleBinding 和 ClusterRoleBinding：角色绑定和集群角色绑定，简单来说就是把声明的 Subject 和我们的 Role 进行绑定的过程(给某个用户绑定上操作的权限)，二者的区别也是作用范围的区别：RoleBinding 只会影响到当前 namespace 下面的资源操作权限，而 ClusterRoleBinding 会影响到所有的 namespace。</li>
</ul>
<pre><code class="language-flow">st=&gt;start: 开始 
e=&gt;end: 登录 
io1=&gt;inputoutput: 输入用户名密码 
sub1=&gt;subroutine: 数据库查询子类 
cond=&gt;condition: 是否有此用户 
cond2=&gt;condition: 密码是否正确 
op=&gt;operation: 读入用户信息
st-&gt;io1-&gt;sub1-&gt;cond 
cond(yes,right)-&gt;cond2 
cond(no)-&gt;io1(right) 
cond2(yes,right)-&gt;op-&gt;e 
cond2(no)-&gt;io1 
</code></pre>
<h1 id="创建一个只能访问特定命名空间用户和权限">创建一个只能访问特定命名空间用户和权限</h1>
<pre><code class="language-shell"># 创建 test 命名空间
kubectl create namespace test

# 在 test 创建一个用户
kubectl create sa testadmin -n test
</code></pre>
<h2 id="创建一个角色">创建一个角色</h2>
<pre><code class="language-shell">vim role-test-admin.yaml

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: role-test-admin
rules:
- apiGroups: [&quot;&quot;]
    resources: [&quot;*&quot;]
    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]
- apiGroups: [&quot;extensions&quot;, &quot;apps&quot;]
    resources: [&quot;*&quot;]
    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]

kubectl apply -f role-test-admin.yaml
</code></pre>
<h2 id="将用户绑定到角色">将用户绑定到角色</h2>
<pre><code class="language-shell">vim role-test-admin-binding.yaml

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: role-test-admin-binding
subjects:
- kind: ServiceAccount
    name: testadmin
    namespace: test
roleRef:
    kind: Role
    name: role-test-admin
    apiGroup: rbac.authorization.k8s.io

kubectl apply -f role-test-admin-binding.yaml
</code></pre>
<h2 id="获取用户登录-token">获取用户登录 Token</h2>
<pre><code class="language-shell"># 查看用户 Token
kubectl get secret -n test | grep testadmin

# 获取登录 Dashboard UI 的 Token 值
kubectl describe secret -n test [tokenname]
</code></pre>
<h1 id="创建一个整个集群只读用户和权限">创建一个整个集群只读用户和权限</h1>
<pre><code class="language-shell"># 创建集群用户
kubectl create sa panxiaoan -n kube-system
</code></pre>
<h2 id="创建一个集群只读角色">创建一个集群只读角色</h2>
<pre><code class="language-shell">vim cluster-role-readonly.yaml

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: cluster-role-readonly
rules:
- apiGroups: [&quot;&quot;]
    resources: [&quot;*&quot;]
    verbs: [&quot;get&quot;, &quot;watch&quot;, &quot;list&quot;]
- apiGroups: [&quot;extensions&quot;, &quot;apps&quot;]
    resources: [&quot;*&quot;]
    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]

kubectl apply -f cluster-role-readonly.yaml
</code></pre>
<h2 id="绑定角色到用户">绑定角色到用户</h2>
<pre><code class="language-shell">vim cluster-role-readonly-binding.yaml

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: cluster-role-readonly-binding
subjects:
- kind: ServiceAccount
    name: panxiaoan
    namespace: kube-system
roleRef:
    kind: ClusterRole
    name: cluster-role-readonly
    apiGroup: rbac.authorization.k8s.io

kubectl apply -f cluster-role-readonly-binding.yaml
</code></pre>
<h2 id="获取用户登录-token-2">获取用户登录 Token</h2>
<pre><code class="language-shell"># 查看用户 Token
kubectl get secret -n kube-system | grep panxiaoan

# 获取登录 Dashboard UI 的 Token 值
kubectl describe secret -n kube-system [tokenname]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kubernetes：配置 Dashboard GUI 04]]></title>
        <id>https://panxiaoan.github.io/post/kubernetespei-zhi-dashboard-gui-04</id>
        <link href="https://panxiaoan.github.io/post/kubernetespei-zhi-dashboard-gui-04">
        </link>
        <updated>2019-05-31T02:29:09.000Z</updated>
        <content type="html"><![CDATA[<p>Dashboard GUI 作为 Kubernetes 的 Web 用户界面，用户可以通过 Dashboard 在 Kubernetes 集群中: 管理集群, 部署服务等等。通过 Dashboard，用户可以查看集群中应用的运行情况，同时也能够基于 Dashboard 创建或修改部署、任务、服务等 Kubernetes 的资源。通过部署向导，用户能够对部署进行扩缩容，进行滚动更新、重启 Pod 和部署新应用。当然，通过 Dashboard 也能够查看 Kubernetes 资源的状态。</p>
<blockquote>
<p>以下操作均在 k8s-master</p>
</blockquote>
<h1 id="安装">安装</h1>
<pre><code class="language-shell">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml
</code></pre>
<h1 id="修改配置">修改配置</h1>
<pre><code class="language-shell"># type: ClusterIP，修改为：type: NodePort, 才能在集群外部访问
kubectl -n kube-system edit service kubernetes-dashboard
</code></pre>
<h1 id="查看-dashboard-服务状态">查看 Dashboard 服务状态</h1>
<pre><code class="language-shell">kubectl -n kube-system get service kubernetes-dashboard
</code></pre>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/8786616c-4bcd-4b18-82a9-48a3a957d370/Untitled.png?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536375563&Signature=luyDD9fAfOqeaZ%2BTc6bQp8zvDSk%3D" />
<h2 id="通过-rbac-授权-admin-集群管理员权限">通过 RBAC 授权 Admin 集群管理员权限</h2>
<pre><code class="language-shell"># 创建 Admin 服务账号
kubectl create serviceaccount cluster-admin-dashboard-sa

# 绑定服务账号
kubectl create clusterrolebinding cluster-admin-dashboard-sa \
    --clusterrole=cluster-admin \
    --serviceaccount=default:cluster-admin-dashboard-sa

# 获取 Admin Token 名称
kubectl get secret | grep cluster-admin-dashboard-sa

# 获取 Admin Token, 通过 Token 登录 Dashboard
kubectl describe secret cluster-admin-dashboard-sa-token-pfprg
</code></pre>
<ul>
<li>访问 Dashboard: https://192.168.246.166:30082, 用 Token 登录
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/f15ebeab-c87b-46ce-b63c-94f8662b01a7/Untitled.png?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536375602&Signature=Rv6WgyJq29MLxgLaA770uYyVG8E%3D" />
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/f15ebeab-c87b-46ce-b63c-94f8662b01a7/Untitled.png?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536375602&Signature=Rv6WgyJq29MLxgLaA770uYyVG8E%3D" /></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kubernetes：初始 Kube 集群 03]]></title>
        <id>https://panxiaoan.github.io/post/kuberneteschu-shi-kube-ji-qun-03</id>
        <link href="https://panxiaoan.github.io/post/kuberneteschu-shi-kube-ji-qun-03">
        </link>
        <updated>2019-05-31T02:28:42.000Z</updated>
        <content type="html"><![CDATA[<p>在环境准备的时候, 我们在准备的两台服务器中都安装了: docker, kubeadm, kubectl, kubelet, kubernetes-cni, 以及安装这些组件所需的 Docker 镜像. 而本文是专门使用 Kubeadm 来配置 master 节点.</p>
<h1 id="初始化集群">初始化集群</h1>
<pre><code class="language-shell">kubeadm init --kubernetes-version=v1.10.0 --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.246.166 --ignore-preflight-errors=Swap
    
# 指定 Kubernetes 版本
--kubernetes-version=v1.10.0
# flannel 使用
--pod-network-cidr=10.244.0.0/16
# k8s-master ip 地址
--apiserver-advertise-address=192.168.246.166
# 忽略 Swap 错误
--ignore-preflight-errors=Swap
</code></pre>
<h2 id="记录-kubeadm-init-最后输出的日志">记录 kubeadm init 最后输出的日志</h2>
<pre><code class="language-shell">
# 运行下面三个命令
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# 记住下面这个命令, 用于将其他节点加入 Kube 集群, 主要是 其中的 token
kubeadm join 192.168.246.166:6443 --token 7azmk8.20ip5o7skbi4cegy --discovery-token-ca-cert-hash sha256:a3f37441dff827a6134ab638ce45e2051db645d60224d325ddff5453a7f0b04e
</code></pre>
<h2 id="安装-pod-network-flannel">安装 Pod network: flannel</h2>
<pre><code class="language-shell">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
</code></pre>
<h2 id="检查集群节点是否安装成功">检查集群节点是否安装成功</h2>
<pre><code class="language-shell">kubectl get nodes -o wide
</code></pre>
<h1 id="将-k8s-node01-加入集群">将 k8s-node01 加入集群</h1>
<pre><code class="language-shell">kubeadm join 192.168.246.166:6443 --token 7azmk8.20ip5o7skbi4cegy --discovery-token-ca-cert-hash sha256:a3f37441dff827a6134ab638ce45e2051db645d60224d325ddff5453a7f0b04e
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kubernetes：安装 Kube 集群 环境准备 02]]></title>
        <id>https://panxiaoan.github.io/post/kubernetes-an-zhuang-kube-ji-qun-huan-jing-zhun-bei-02</id>
        <link href="https://panxiaoan.github.io/post/kubernetes-an-zhuang-kube-ji-qun-huan-jing-zhun-bei-02">
        </link>
        <updated>2019-05-31T02:26:15.000Z</updated>
        <content type="html"><![CDATA[<p>我是通过 Kubeadm 安装 Kubernetes 集群. 那什么是 Kubeadm 呢? kubeadm 是 Kubernetes 官方提供的快速安装和初始化 Kubernetes 集群的工具.</p>
<h1 id="环境配置所有节点">环境配置(所有节点)</h1>
<h2 id="我的环境">我的环境</h2>
<table>
<thead>
<tr>
<th style="text-align:left">hostname</th>
<th style="text-align:left">用途</th>
<th style="text-align:left">IP</th>
<th style="text-align:left">配置</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">k8s-master</td>
<td style="text-align:left">master</td>
<td style="text-align:left">192.168.246.166</td>
<td style="text-align:left">2C 4G 25GB</td>
</tr>
<tr>
<td style="text-align:left">k8s-node01</td>
<td style="text-align:left">node</td>
<td style="text-align:left">192.168.246.167</td>
<td style="text-align:left">2C 4G 25GB</td>
</tr>
</tbody>
</table>
<pre><code class="language-shell"># 宿主机
macOS 10.13.6
VMware Fusion 10.1.2

# 虚拟机操作系统
# uname -sr
Linux version 3.10.0-862.2.3.el7.x86_64
# cat /etc/redhat-release
CentOS Linux release 7.5.1804 (Core)

# 最低配置 
2C 2G 25GB
</code></pre>
<h1 id="修改系统配置">修改系统配置</h1>
<h2 id="修改-hostname">修改 hostname</h2>
<pre><code class="language-shell">vim /etc/hosts
192.168.246.166 k8s-master
192.168.246.167 k8s-node01

# 如果是阿里云 ECS host 需要按下面方式修改(单独在每台节点设置)
hostnamectl --static set-hostname k8s-master
# 重启 系统
reboot
# 查看 hostname 修改结果
hostnamectl status
</code></pre>
<h2 id="关闭防火墙">关闭防火墙</h2>
<pre><code class="language-shell">systemctl stop firewalld
systemctl disable firewalld
</code></pre>
<h2 id="禁用-selinux">禁用 selinux</h2>
<pre><code class="language-shell">setenforce 0
sed -i &quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/sysconfig/selinux
</code></pre>
<h2 id="关闭-swap">关闭 swap</h2>
<pre><code class="language-shell">swapoff -a 
sed -i 's/.*swap.*/#&amp;/' /etc/fstab
</code></pre>
<h2 id="配置-iptables-转发参数">配置 iptables 转发参数</h2>
<pre><code class="language-shell">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables=1
net.bridge.bridge-nf-call-iptables=1
net.ipv4.ip_forward=1
EOF

# 生效并查看 iptables 配置
modprobe br_netfilter
sysctl -p /etc/sysctl.d/k8s.conf
</code></pre>
<h1 id="安装-阿里云-yum-源">安装 阿里云 YUM 源</h1>
<h2 id="创建源文件">创建源文件</h2>
<pre><code class="language-shell">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
EOF
</code></pre>
<h2 id="更新">更新</h2>
<pre><code class="language-shell">yum clean all
yum makecache
yum update -y
</code></pre>
<h1 id="安装-docker">安装 Docker</h1>
<h2 id="下载并安装">下载并安装</h2>
<pre><code class="language-shell"># 下载并安装正式版
curl -fsSL https://get.docker.com | sh

# 非 root 用户，则将用户加入 docker 组
sudo usermod -aG docker [username]

# 生效、启动
systemctl enable docker
systemctl start docker
chkconfig docker on

# 检查是否成功启动
docker version
</code></pre>
<h1 id="安装-kubeadm">安装 Kubeadm</h1>
<h2 id="下载必要镜像">下载必要镜像</h2>
<blockquote>
<p>因为 Kube 的镜像网站被墙, 所以只能曲线救国. 在 Github 中创建一个项目, 参考 &quot;<a href="https://github.com/panxiaoan/kubernetes-images-mirror">https://github.com/panxiaoan/kubernetes-images-mirror</a>&quot;, 然后在 Docker Hub 中选择 &quot;Create Autoomated Build&quot;</p>
</blockquote>
<pre><code class="language-shell"># 下载我已准备好的 Shell 文件
https://github.com/panxiaoan/kubernetes-images-mirror/blob/v1.10.0/pull-k8s-images.sh

# 授权
chmod a+x pull-k8s-images.sh

# 运行, 此时开始从 Docker Hub 中下载
./pull-k8s-images.sh
</code></pre>
<h2 id="安装-kubectl-kubeadm-kubelet">安装 Kubectl Kubeadm Kubelet</h2>
<pre><code class="language-shell">yum install -y kubeadm-1.10.0-0 kubectl-1.10.0-0 kubelet-1.10.0-0 kubernetes-cni
</code></pre>
<h2 id="配置-kubeadm-环境变量">配置 Kubeadm 环境变量</h2>
<pre><code class="language-shell">vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

# 将 systemd 修改为 cgroupfs
# 通过 docker info 查看: Cgroup Driver: cgroupfs
Environment=&quot;KUBELET_CGROUP_ARGS=--cgroup-driver=cgroupfs&quot;
Environment=&quot;KUBELET_EXTRA_ARGS=--fail-swap-on=false&quot;
</code></pre>
<h2 id="启动-kubelet-服务">启动 Kubelet 服务</h2>
<pre><code class="language-shell">systemctl daemon-reload
systemctl enable kubelet.service
systemctl start kubelet.service
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kubernetes：简介 01]]></title>
        <id>https://panxiaoan.github.io/post/kubernetes-jian-jie</id>
        <link href="https://panxiaoan.github.io/post/kubernetes-jian-jie">
        </link>
        <updated>2019-05-31T02:25:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="kubernetes-简介">Kubernetes 简介</h1>
<p>Kubernetes 是<code>Google</code> 基于 <code>Borg</code> 开源的容器编排调度引擎，作为<code>CNCF</code>（Cloud Native Computing Foundation）最重要的组件之一，它的目标<code>不仅仅是一个编排系统，而是提供一个规范</code>，可以让你来描述集群的架构，定义服务的最终状态，kubernetes 可以帮你将系统自动地达到和维持在这个状态。Kubernetes 作为云原生应用的基石，相当于一个<code>云操作系统</code>，其重要性不言而喻。</p>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/ce357138-1474-4649-aee1-16ea05374fde/Untitled?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536372011&Signature=LUMj%2BI9OXMyI%2BTW1Dce1xxyvYS4%3D" />
图片转载
<h2 id="历史">历史</h2>
<ul>
<li>Kubernetes 最初源于谷歌内部的 Borg，提供了面向应用的容器集群部署和管理系统</li>
<li>Kubernetes 的目标旨在消除编排物理/虚拟计算，网络和存储基础设施的负担，并使应用程序运营商和开发人员完全将重点放在以容器为中心的原语上进行自助运营。</li>
<li>Kubernetes 也提供稳定、兼容的基础（平台），用于构建定制化的 workflows 和更高级的自动化任务。</li>
<li>Kubernetes 具备完善的集群管理能力：
<ul>
<li>多层次的安全防护和准入机制</li>
<li>多租户应用支撑能力</li>
<li>透明的服务注册和服务发现机制</li>
<li>内建负载均衡器</li>
<li>故障发现和自我修复能力</li>
<li>服务滚动升级和在线扩容</li>
<li>可扩展的资源自动调度机制</li>
<li>多粒度的资源配额管理能力</li>
</ul>
</li>
<li>Kubernetes 还提供完善的管理工具，涵盖开发、部署测试、运维监控等各个环节</li>
</ul>
<h2 id="borg-简介">Borg 简介</h2>
<p>Borg 是谷歌内部的大规模集群管理系统，负责对谷歌内部很多核心服务的调度和管理。Borg的目的是让用户能够不必操心资源管理的问题，让他们专注于自己的核心业务，并且做到跨多个数据中心的资源利用率最大化。</p>
<p>Borg 主要由 BorgMaster、Borglet、borgcfg 和 Scheduler组成，如下图所示</p>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/624871b3-0ca7-4525-ba85-9df75614292d/Untitled?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536372011&Signature=2WU8nHR2WxGCdDNprBf8E7S7RFk%3D" />
图片转载
<ul>
<li>BorgMaster 是整个集群的大脑，负责维护整个集群的状态，并将数据持久化到Paxos存储中；</li>
<li>Scheduer 负责任务的调度，根据应用的特点将其调度到具体的机器上去；</li>
<li>Borglet 负责真正运行任务（在容器中）；</li>
<li>borgcfg 是 Borg 的命令行工具，用于跟 Borg 系统交互，一般通过一个配置文件来提交任务。</li>
</ul>
<h1 id="kubernetes-架构">Kubernetes 架构</h1>
<p>Kubernetes 借鉴了 Borg 的设计理念，比如 Pod、Service、Labels 和单 Pod、单 IP 等。Kubernetes 的整体架构跟 Borg 非常像，如下图所示：</p>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/cddf35f5-e78c-4cb1-a9a6-2a954bab8fa4/Untitled?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536372011&Signature=z79lkPLFsGkd8ykneNETbb8nCsY%3D" />
图片转载
<p><strong>Kubernetes主要由以下几个核心组件组成：</strong></p>
<ul>
<li>etcd 保存了整个集群的状态；</li>
<li>apiserver 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；</li>
<li>controller manager 负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</li>
<li>scheduler 负责资源的调度，按照预定的调度策略将 Pod 调度到相应的机器上；</li>
<li>kubelet 负责维护容器的生命周期，同时也负责 Volume（CSI）和网络（CNI）的管理；</li>
<li>Container runtime 负责镜像管理以及 Pod 和容器的真正运行（CRI）；</li>
<li>kube-proxy 负责为 Service 提供 cluster 内部的服务发现和负载均衡；</li>
</ul>
<p><strong>除了核心组件，还有一些推荐的 Add-ons：</strong></p>
<ul>
<li>kube-dns 负责为整个集群提供DNS服务</li>
<li>Ingress Controller 为服务提供外网入口</li>
<li>Heapster 提供资源监控</li>
<li>Dashboard 提供 Web UI</li>
<li>Federation 提供跨可用区的集群</li>
</ul>
<h2 id="整体架构图">整体架构图</h2>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/e9a49a30-30eb-42dd-ad1e-7e918fd21982/Untitled?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536372011&Signature=tLBi3WC3laki36djhDOBjNxIfUY%3D" />
图片转载
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/dc93d42b-0e41-440c-a13d-b6492223564a/Untitled?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536372011&Signature=AnVftP%2BBBWU1zQnwEpDB5W4vgkw%3D" />
图片转载
<h2 id="master-架构">Master 架构</h2>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/0ffa2aed-0ed6-41ad-94a0-41d09e8967c4/Untitled?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536372012&Signature=6VayKG8GB9oiuam%2Bd37wyKABUCA%3D" />
图片转载
<h2 id="node-架构">Node 架构</h2>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/cc8f0f2f-2f13-4637-be83-88c884efbece/Untitled?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536372012&Signature=GOflyisna2xUXd4OLFyEuNl3RCI%3D" />
图片转载
<h2 id="分层架构">分层架构</h2>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/3c8ab571-b914-474d-83b8-d8c6c522ebe9/Untitled?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536372012&Signature=I7sdR%2FWj1R0wNOniT1otvpjYkX4%3D" />
<p><strong>Kubernetes 设计理念和功能其实就是一个类似 Linux 的分层架构：</strong></p>
<ul>
<li>核心层：Kubernetes 最核心的功能，对外提供API构建高层的应用，对内提供插件式应用执行环境</li>
<li>应用层：部署（无状态应用、有状态应用、批处理任务、集群应用等）和路由（服务发现、DNS解析等）</li>
<li>管理层：系统度量（如基础设施、容器和网络的度量），自动化（如自动扩展、动态Provision等）以及策略管理（RBAC、Quota、PSP、NetworkPolicy等）</li>
<li>接口层：kubectl命令行工具、客户端SDK以及集群联邦</li>
<li>生态系统：在接口层之上的庞大容器集群管理调度的生态系统，可以划分为两个范畴
<ul>
<li>Kubernetes外部：日志、监控、配置管理、CI、CD、Workflow、FaaS、OTS应用、ChatOps等</li>
<li>Kubernetes内部：CRI、CNI、CVI、镜像仓库、Cloud Provider、集群自身的配置和管理等</li>
</ul>
</li>
</ul>
<h2 id="开发接口">开发接口</h2>
<p>Kubernetes 作为云原生应用的的基础调度平台，相当于云原生的操作系统，为了便于系统的扩展，Kubernetes 中开放的以下接口，可以分别对接不同的后端，来实现自己的业务逻辑：</p>
<ul>
<li><strong>CRI（Container Runtime Interface）</strong>：容器运行时接口，提供计算资源</li>
<li><strong>CNI（Container Network Interface）</strong>：容器网络接口，提供网络资源</li>
<li><strong>CSI（Container Storage Interface</strong>）：容器存储接口，提供存储资源</li>
</ul>
<p>以上三种资源相当于一个分布式操作系统的最基础的几种资源类型，而Kuberentes是将他们粘合在一起的纽带。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker：Compose 搭建镜像仓库 04]]></title>
        <id>https://panxiaoan.github.io/post/docker-compose-da-jian-jing-xiang-cang-ku</id>
        <link href="https://panxiaoan.github.io/post/docker-compose-da-jian-jing-xiang-cang-ku">
        </link>
        <updated>2019-05-31T02:25:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="docker-compose">Docker Compose</h1>
<p>Docker Compose 是一个用来定义和运行复杂应用的 Docker 工具。一个使用 Docker 容器的应用，通常由多个容器组成。使用 Docker Compose 不再需要使用 shell 脚本来启动容器。
Compose 通过一个配置文件来管理多个 Docker 容器，在配置文件中，所有的容器通过 services 来定义，然后使用 docker-compose 脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器，非常适合组合使用多个容器进行开发的场景。</p>
<h1 id="基本概念">基本概念</h1>
<ul>
<li>服务 ( service )：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li>
<li>项目 ( project )：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。</li>
</ul>
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/e73257e8-2ef3-40dc-98e1-6fc92bfe7299/Untitled?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536384721&Signature=mMcoDeitJj0WmvKcqf5PE%2FprXTg%3D" />
<h1 id="安装">安装</h1>
<pre><code class="language-shell"># 查看最新版本
https://github.com/docker/compose/releases

# 下载并安装
curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose

# 授权
chmod +x /usr/local/bin/docker-compose

# 查看安装版本
docker-compose --version
</code></pre>
<h1 id="使用-docker-compose-安装私有镜像仓库">使用 Docker Compose 安装私有镜像仓库</h1>
<h2 id="安装组件">安装组件</h2>
<ul>
<li>Docker Registry：是 Docker 官方提供的镜像仓库服务，开源免费，用于搭建私有仓库服务，在内部分发镜像</li>
<li>Docker Registry Web：能够通过浏览器可视化的查看镜像仓库中的：镜像、TAG、事件、删除镜像等</li>
</ul>
<h2 id="使用方法">使用方法</h2>
<p><strong>准备</strong></p>
<pre><code class="language-shell">
# 下载镜像
docker pull registry:2.6.2
docker pull hyper/docker-registry-web

# 创建镜像存放目录
mkdir -p /opt/docker/registry

# 创建 Registry Web DB 存放目录
mkdir -p /opt/docker/registry-db

# 克隆 private-docker-registry 项目
cd /opt/docker
git clone https://github.com/panxiaoan/private-docker-registry.git

</code></pre>
<p><strong>创建验证文件</strong></p>
<pre><code class="language-shell">cd ../private-docker-registry
./generate-keys.sh
</code></pre>
<p><strong>创建、下载、运行容器</strong></p>
<pre><code class="language-shell">cd ../private-docker-registry
docker-compose up -d
</code></pre>
<p><strong>使用</strong></p>
<ul>
<li>Docker Registry: localhost:5000</li>
<li>Docker Registry Web UI: http://localhost:5001</li>
<li>默认账号密码：admin / admin</li>
<li>登录 Registry Web 后，请给 admin 添加 <strong>write-all</strong> 角色，才能拉取和推送镜像</li>
</ul>
<p><strong>测试</strong></p>
<pre><code class="language-shell"># 此处登录的是 Registry
docker login localhost:5000
docker pull hello-world
docker tag hello-world localhost:5001/hello-world:v1.0.0
docker push localhost:5001/hello-world:v1.0.0

docker rmi localhost:5000/hello-world:v1.0.0
docker run localhost:5000/hello-world:v1.0.0 
</code></pre>
<p><strong>注意事项</strong></p>
<ul>
<li>当远程访问时，这个例子没有配置反向代理，所以需要修改客户端的 Docker 配置</li>
</ul>
<pre><code class="language-shell">vim /usr/lib/systemd/system/docker.service

# 加入这一段：--insecure-registry 192.168.246.146:5000
ExecStart=/usr/bin/dockerd --insecure-registry 192.168.246.146:5000

# 生效和重启 Docker
systemctl daemon-reload
systemctl restart docker
</code></pre>
<ul>
<li>另外在两个 config.yml 文件中的 URL 地址请写宿主机 IP 或者域名</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker：使用 Dockerfile 部署 Spring Boot 应用 03]]></title>
        <id>https://panxiaoan.github.io/post/dockershi-yong-dockerfile-bu-shu-spring-boot-ying-yong</id>
        <link href="https://panxiaoan.github.io/post/dockershi-yong-dockerfile-bu-shu-spring-boot-ying-yong">
        </link>
        <updated>2019-05-31T02:24:12.000Z</updated>
        <content type="html"><![CDATA[<p>Dockerfile 一个声明式的配置文件, 是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。它们简化了从头到尾的流程并极大的简化了部署工作。Dockerfile 从 FROM 命令开始，紧接着跟随者各种方法，命令和参数。其产出为一个新的可以用于创建容器的镜像。</p>
<h1 id="下载我准备好的示例项目-基于-springboot">下载我准备好的示例项目, 基于 SpringBoot</h1>
<pre><code class="language-shell"># 下载可直接运行的 jar
https://pan.baidu.com/s/1mnrO5C1RGJh62vzxsun4Aw

# 或者通过源码构建
git clone https://github.com/panxiaoan/spring-boot-gwt-sample
mvn clean eclipse:eclipse
mvn clean package -Dmaven.test.skip=true

# 因为 Docker Hub 访问太慢，故从时速云中拉取基础镜像
docker pull index.tenxcloud.com/tenxcloud/java:8
</code></pre>
<h1 id="创建-dockerfile-文件">创建 DockerFile 文件</h1>
<pre><code class="language-shell">mkdir /opt/spring-boot-gwt-sample

cd /opt/spring-boot-gwt-sample

vim Dockerfile

# 基础镜像
FROM index.tenxcloud.com/tenxcloud/java:8
# 作者
MAINTAINER panxiaoan(xiaoan.pan@qq.com)
# 将 Spring Boot 应用复制到镜像中
ADD spring-boot-gwt-sample-0.0.1.jar /opt
# 切换目录，相当于 cd 命令
WORKDIR /opt
# 在容器中运行的命令
CMD [&quot;java&quot;,&quot;-jar&quot;,&quot;spring-boot-gwt-sample-0.0.1.jar&quot;]
</code></pre>
<h1 id="创建一个启动-shell">创建一个启动 Shell</h1>
<pre><code class="language-shell">cd /opt/spring-boot-gwt-sample
vim start.sh

#!/bin/bash

CONTAINER_NAME=spring-boot-gwt-sample
IMAGES_NAME=java/$CONTAINER_NAME

FILENAME=$(find -name spring-boot-gwt-sample-**.jar)
JARNAME=${FILENAME##*/}
chmod  777 $JARNAME

# 停止并删除原有容器 
docker stop $CONTAINER_NAME
docker rm $CONTAINER_NAME

# 删除原有容器镜像
IMAGE_ID=$(docker images | grep &quot;$IMAGES_NAME&quot; | awk '{print $3}')
echo &quot;iam:&quot;$IMAGE_ID
if [ -z &quot;$IMAGE_ID&quot; ]
then
    echo no images need del
else
    echo &quot;rm images:&quot; $IMAGE_ID
    docker rmi -f $IMAGE_ID
fi

# 构建容器
docker build --build-arg app=$JARNAME . -t $IMAGES_NAME
 
# 运行容器
docker run -d -p 8080:8080 --name $CONTAINER_NAME $IMAGES_NAME
</code></pre>
<h1 id="运行-startsh">运行 start.sh</h1>
<pre><code class="language-shell">cd /opt/spring-boot-gwt-sample
chmod a+x start.sh
./start.sh
</code></pre>
<h1 id="访问应用">访问应用</h1>
<ul>
<li>http://localhost:8080
<img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/bec5ebd6-63d7-48b2-9112-75e6ee776eaa/Untitled?AWSAccessKeyId=AKIAJLJXUMP5IHUZAPFQ&Expires=1536383023&Signature=64NZPwaERHNa%2FqwePv3L500cVe8%3D" /></li>
</ul>
]]></content>
    </entry>
</feed>